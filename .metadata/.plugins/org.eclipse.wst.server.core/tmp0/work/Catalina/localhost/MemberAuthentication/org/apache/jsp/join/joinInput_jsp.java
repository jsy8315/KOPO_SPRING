/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.6
 * Generated at: 2023-07-04 01:21:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.join;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class joinInput_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원가입</title>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n");
      out.write("<style>\r\n");
      out.write("@font-face {\r\n");
      out.write("	font-family: 'Tenada';\r\n");
      out.write("	src:\r\n");
      out.write("		url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2210-2@1.0/Tenada.woff2')\r\n");
      out.write("		format('woff2');\r\n");
      out.write("	font-weight: normal;\r\n");
      out.write("	font-style: normal;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("	font-family: 'Tenada', Arial, sans-serif;\r\n");
      out.write("	background-color: #f2f2f2;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center; /* 수직 가운데 정렬 */\r\n");
      out.write("	justify-content: center; /* 수평 가운데 정렬 */\r\n");
      out.write("	min-height: 100vh; /* 화면 전체 높이로 설정 */\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h1 {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("form {\r\n");
      out.write("	max-width: 1000px;\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	background-color: #fff;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("form table {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("form table td {\r\n");
      out.write("	padding: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"text\"], input[type=\"password\"], input[type=\"email\"], input[type=\"tel\"]\r\n");
      out.write("	{\r\n");
      out.write("	width: 90%;\r\n");
      out.write("	padding: 8px;\r\n");
      out.write("	border: 1px solid #ccc;\r\n");
      out.write("	border-radius: 4px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"submit\"] {\r\n");
      out.write("	width: 200px;\r\n");
      out.write("	padding: 8px;\r\n");
      out.write("	border: none;\r\n");
      out.write("	background-color: #4CAF50;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	border-radius: 4px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"submit\"]:hover {\r\n");
      out.write("	background-color: #45a049;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#loginButton {\r\n");
      out.write("  background-color: #000000;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("#joinButton {\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("button {\r\n");
      out.write("  width: 200px;\r\n");
      out.write("  padding: 8px;\r\n");
      out.write("  border: none;\r\n");
      out.write("  background-color: #555;\r\n");
      out.write("  color: #fff;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("  border-radius: 4px;\r\n");
      out.write("  display: inline-block;\r\n");
      out.write("  margin-right: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("button:hover {\r\n");
      out.write("	background-color: #333;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".error-message {\r\n");
      out.write("	color: red;\r\n");
      out.write("	display: none;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<script\r\n");
      out.write("		src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("		function sample4_execDaumPostcode() {\r\n");
      out.write("			new daum.Postcode(\r\n");
      out.write("					{\r\n");
      out.write("						oncomplete : function(data) {\r\n");
      out.write("							var roadAddr = data.roadAddress;\r\n");
      out.write("							var extraRoadAddr = '';\r\n");
      out.write("\r\n");
      out.write("							if (data.bname !== ''\r\n");
      out.write("									&& /[동|로|가]$/g.test(data.bname)) {\r\n");
      out.write("								extraRoadAddr += data.bname;\r\n");
      out.write("							}\r\n");
      out.write("\r\n");
      out.write("							if (data.buildingName !== ''\r\n");
      out.write("									&& data.apartment === 'Y') {\r\n");
      out.write("								extraRoadAddr += (extraRoadAddr !== '' ? ', '\r\n");
      out.write("										+ data.buildingName : data.buildingName);\r\n");
      out.write("							}\r\n");
      out.write("\r\n");
      out.write("							if (extraRoadAddr !== '') {\r\n");
      out.write("								extraRoadAddr = ' (' + extraRoadAddr + ')';\r\n");
      out.write("							}\r\n");
      out.write("\r\n");
      out.write("							document.getElementById('sample4_postcode').value = data.zonecode;\r\n");
      out.write("							document.getElementById('sample4_roadAddress').value = roadAddr;\r\n");
      out.write("							document.getElementById('sample4_jibunAddress').value = data.jibunAddress;\r\n");
      out.write("\r\n");
      out.write("							if (roadAddr !== '') {\r\n");
      out.write("								document.getElementById('sample4_extraAddress').value = extraRoadAddr;\r\n");
      out.write("							} else {\r\n");
      out.write("								document.getElementById('sample4_extraAddress').value = '';\r\n");
      out.write("							}\r\n");
      out.write("\r\n");
      out.write("							var guideTextBox = document.getElementById('guide');\r\n");
      out.write("							if (data.autoRoadAddress) {\r\n");
      out.write("								var expRoadAddr = data.autoRoadAddress\r\n");
      out.write("										+ extraRoadAddr;\r\n");
      out.write("								guideTextBox.innerHTML = '(예상 도로명 주소: '\r\n");
      out.write("										+ expRoadAddr + ')';\r\n");
      out.write("								guideTextBox.style.display = 'block';\r\n");
      out.write("							} else if (data.autoJibunAddress) {\r\n");
      out.write("								var expJibunAddr = data.autoJibunAddress;\r\n");
      out.write("								guideTextBox.innerHTML = '(예상 지번 주소: '\r\n");
      out.write("										+ expJibunAddr + ')';\r\n");
      out.write("								guideTextBox.style.display = 'block';\r\n");
      out.write("							} else {\r\n");
      out.write("								guideTextBox.innerHTML = '';\r\n");
      out.write("								guideTextBox.style.display = 'none';\r\n");
      out.write("							}\r\n");
      out.write("\r\n");
      out.write("							// 주소 필드를 채운 후 loginResult 페이지로 값을 넘기는 부분\r\n");
      out.write("\r\n");
      out.write("						}\r\n");
      out.write("					}).open();\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	<script>\r\n");
      out.write("		function formatPhoneNumber() {\r\n");
      out.write("			var phoneNumberInput = document\r\n");
      out.write("					.querySelector('input[name=\"phone_number\"]');\r\n");
      out.write("			var phoneNumber = phoneNumberInput.value.replace(/[^0-9]/g, '');\r\n");
      out.write("			var formattedPhoneNumber = '';\r\n");
      out.write("\r\n");
      out.write("			if (phoneNumber.length > 3) {\r\n");
      out.write("				formattedPhoneNumber += phoneNumber.substr(0, 3) + '-';\r\n");
      out.write("				if (phoneNumber.length > 7) {\r\n");
      out.write("					formattedPhoneNumber += phoneNumber.substr(3, 4) + '-'\r\n");
      out.write("							+ phoneNumber.substr(7);\r\n");
      out.write("				} else {\r\n");
      out.write("					formattedPhoneNumber += phoneNumber.substr(3);\r\n");
      out.write("				}\r\n");
      out.write("			} else {\r\n");
      out.write("				formattedPhoneNumber = phoneNumber;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			phoneNumberInput.value = formattedPhoneNumber;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		var phoneNumberInput = document\r\n");
      out.write("				.querySelector('input[name=\"phone_number\"]');\r\n");
      out.write("		phoneNumberInput.addEventListener('keyup', formatPhoneNumber);\r\n");
      out.write("\r\n");
      out.write("		document\r\n");
      out.write("				.querySelector('form')\r\n");
      out.write("				.addEventListener(\r\n");
      out.write("						'submit',\r\n");
      out.write("						function(event) {\r\n");
      out.write("							var passwordInput = document\r\n");
      out.write("									.querySelector('input[name=\"password\"]');\r\n");
      out.write("							var password = passwordInput.value;\r\n");
      out.write("\r\n");
      out.write("							if (!isPasswordValid(password)) {\r\n");
      out.write("								event.preventDefault();\r\n");
      out.write("								document.getElementById('passwordError').style.display = 'block';\r\n");
      out.write("								passwordInput.focus();\r\n");
      out.write("							}\r\n");
      out.write("						});\r\n");
      out.write("\r\n");
      out.write("		function isPasswordValid(password) {\r\n");
      out.write("			var pattern = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{4,}$/;\r\n");
      out.write("			return pattern.test(password);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function isEmailValid(email) {\r\n");
      out.write("			var pattern = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n");
      out.write("			return pattern.test(email);\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	<form id=\"joinForm\" action=\"join.bank\" method=\"post\">\r\n");
      out.write("		<h1>회원가입</h1>\r\n");
      out.write("		<hr>\r\n");
      out.write("		<table>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><b>아이디:</b></td>\r\n");
      out.write("				<td><input type=\"text\" name=\"id\" placeholder=\"아이디\" required></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><b>비밀번호:</b></td>\r\n");
      out.write("				<td><input type=\"password\" name=\"password\"\r\n");
      out.write("					placeholder=\"영문+숫자 4자리 이상\"\r\n");
      out.write("					pattern=\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{4,}$\" required></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\" id=\"passwordError\" class=\"error-message\">영문과\r\n");
      out.write("					숫자의 조합으로 4자리 이상 입력해주세요.</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><b>이름:</b></td>\r\n");
      out.write("				<td><input type=\"text\" name=\"name\" placeholder=\"이름\" required></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><b>주민등록번호:</b></td>\r\n");
      out.write("				<td><input type=\"text\" name=\"resident_number\"\r\n");
      out.write("					pattern=\"\\d{6}-\\d{7}\" placeholder=\"주민등록번호 (예: 123456-1234567)\"\r\n");
      out.write("					required></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><b>전화번호:</b></td>\r\n");
      out.write("				<td><input type=\"tel\" name=\"phone_number\"\r\n");
      out.write("					pattern=\"\\d{3}-\\d{4}-\\d{4}\" placeholder=\"전화번호 (예: 010-1234-5678)\"\r\n");
      out.write("					required></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><b>이메일:</b></td>\r\n");
      out.write("				<td><input type=\"email\" name=\"email\"\r\n");
      out.write("					placeholder=\"이메일 (예: example@example.com)\" required></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><b>주소:</b></td>\r\n");
      out.write("				<td><input type=\"text\" id=\"sample4_postcode\"\r\n");
      out.write("					name=\"sample4_postcode\" placeholder=\"우편번호\"> <input\r\n");
      out.write("					type=\"button\" onclick=\"sample4_execDaumPostcode()\" value=\"우편번호 찾기\">\r\n");
      out.write("					<br> <input type=\"text\" id=\"sample4_roadAddress\"\r\n");
      out.write("					name=\"sample4_roadAddress\" placeholder=\"도로명주소\"> <input\r\n");
      out.write("					type=\"text\" id=\"sample4_jibunAddress\" name=\"sample4_jibunAddress\"\r\n");
      out.write("					placeholder=\"지번주소\"> <span id=\"guide\"\r\n");
      out.write("					style=\"color: #999; display: none\"></span> <br> <input\r\n");
      out.write("					type=\"text\" id=\"sample4_detailAddress\" name=\"sample4_detailAddress\"\r\n");
      out.write("					placeholder=\"상세주소\"> <br> <input type=\"text\"\r\n");
      out.write("					id=\"sample4_extraAddress\" name=\"sample4_extraAddress\"\r\n");
      out.write("					placeholder=\"참고항목\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<br>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td></td>\r\n");
      out.write("      <td>\r\n");
      out.write("        <input id=\"joinButton\" type=\"submit\" value=\"회원가입\">\r\n");
      out.write("        <button id=\"loginButton\" onclick=\"location.href='../login/login.html'\">로그인 페이지로 이동</button>\r\n");
      out.write("      </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    \r\n");
      out.write("	</table>\r\n");
      out.write("\r\n");
      out.write("	</form>\r\n");
      out.write("	<br>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
